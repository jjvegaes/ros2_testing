-- simThymio lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'
local simThymio=require('simThymio')
local function wrapFunc(funcName, wrapperGenerator)
    simThymio[funcName]=wrapperGenerator()
end
    
wrapFunc('create',function()
    return function(...)
        handle,with_aseba,friendly_name,port,id=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='bool',default=true},
                    {type='string',default="Thymio II"},
                    {type='int',default=33333},
                    {type='int',default=-1},
                },
                ...
            )
            return _G['simAseba']['_thymio2_create'](handle,with_aseba,friendly_name,port,id)
        end
    end)
sim.registerScriptFunction('simThymio.create@Aseba', 'int id=simThymio.create(int handle,bool with_aseba=true,string friendly_name="Thymio II",int port=33333,int id=-1)\n\nInstantiate a Thymio2 controller')

wrapFunc('enable_accelerometer',function()
    return function(...)
        id,state=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='bool'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_enable_accelerometer'](id,state)
        end
    end)
sim.registerScriptFunction('simThymio.enable_accelerometer@Aseba', 'simThymio.enable_accelerometer(int id,bool state)\n\nEnable or disable the accelerometer')

wrapFunc('enable_ground',function()
    return function(...)
        id,state,red,vision=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='bool'},
                    {type='bool',default=false},
                    {type='bool',default=false},
                },
                ...
            )
            return _G['simAseba']['_thymio2_enable_ground'](id,state,red,vision)
        end
    end)
sim.registerScriptFunction('simThymio.enable_ground@Aseba', 'simThymio.enable_ground(int id,bool state,bool red=false,bool vision=false)\n\nEnable, disable and configure the ground sensors')

wrapFunc('enable_proximity',function()
    return function(...)
        id,state,red=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='bool'},
                    {type='bool',default=false},
                },
                ...
            )
            return _G['simAseba']['_thymio2_enable_proximity'](id,state,red)
        end
    end)
sim.registerScriptFunction('simThymio.enable_proximity@Aseba', 'simThymio.enable_proximity(int id,bool state,bool red=false)\n\nEnable, disable and configure the proximity sensors')

wrapFunc('enable_prox_comm',function()
    return function(...)
        id,state=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='bool'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_enable_prox_comm'](id,state)
        end
    end)
sim.registerScriptFunction('simThymio.enable_prox_comm@Aseba', 'simThymio.enable_prox_comm(int id,bool state)\n\nEnable or disable the proximity communication')

wrapFunc('set_led',function()
    return function(...)
        id,index,r,g,b=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                    {type='float'},
                    {type='float'},
                    {type='float'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_set_led'](id,index,r,g,b)
        end
    end)
sim.registerScriptFunction('simThymio.set_led@Aseba', 'simThymio.set_led(int id,int index,float r,float g,float b)\n\nSet the color of a LED')

wrapFunc('set_led_intensity',function()
    return function(...)
        id,index,a=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                    {type='float'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_set_led_intensity'](id,index,a)
        end
    end)
sim.registerScriptFunction('simThymio.set_led_intensity@Aseba', 'simThymio.set_led_intensity(int id,int index,float a)\n\nSet the color intentity of a LED')

wrapFunc('get_speed',function()
    return function(...)
        id,index=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_speed'](id,index)
        end
    end)
sim.registerScriptFunction('simThymio.get_speed@Aseba', 'float speed=simThymio.get_speed(int id,int index)\n\nGet the currrent angular speed of a motor')

wrapFunc('set_target_speed',function()
    return function(...)
        id,index,speed=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                    {type='float'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_set_target_speed'](id,index,speed)
        end
    end)
sim.registerScriptFunction('simThymio.set_target_speed@Aseba', 'simThymio.set_target_speed(int id,int index,float speed)\n\nSet the target angular speed of a motor')

wrapFunc('get_acceleration',function()
    return function(...)
        id=checkargsEx(
            {level=1},
            {
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_acceleration'](id)
        end
    end)
sim.registerScriptFunction('simThymio.get_acceleration@Aseba', 'float x,float y,float z=simThymio.get_acceleration(int id)\n\nGet the current reading the accelerometer')

wrapFunc('get_ground',function()
    return function(...)
        id,index=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_ground'](id,index)
        end
    end)
sim.registerScriptFunction('simThymio.get_ground@Aseba', 'float reflected=simThymio.get_ground(int id,int index)\n\nGet the current reading of a ground sensor')

wrapFunc('get_proximity',function()
    return function(...)
        id,index=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_proximity'](id,index)
        end
    end)
sim.registerScriptFunction('simThymio.get_proximity@Aseba', 'float reading=simThymio.get_proximity(int id,int index)\n\nGet the current reading of a proximity sensor')

wrapFunc('get_prox_comm_rx',function()
    return function(...)
        id=checkargsEx(
            {level=1},
            {
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_prox_comm_rx'](id)
        end
    end)
sim.registerScriptFunction('simThymio.get_prox_comm_rx@Aseba', 'prox_comm_message_t[] messages=simThymio.get_prox_comm_rx(int id)\n\nGet the last messages received by the proximity communication')

wrapFunc('set_prox_comm_tx',function()
    return function(...)
        id,tx=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_set_prox_comm_tx'](id,tx)
        end
    end)
sim.registerScriptFunction('simThymio.set_prox_comm_tx@Aseba', 'simThymio.set_prox_comm_tx(int id,int tx)\n\nSet the integer value to be transmitted at each step if the communication is enabled. The real robot is limited to 11 bits. The simulated robot can send 32-bit integers.')

wrapFunc('get_button',function()
    return function(...)
        id,index=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_get_button'](id,index)
        end
    end)
sim.registerScriptFunction('simThymio.get_button@Aseba', 'bool value=simThymio.get_button(int id,int index)\n\nGet the current state of a button sensor')

wrapFunc('set_button',function()
    return function(...)
        id,index,value=checkargsEx(
            {level=1},
            {
                    {type='int'},
                    {type='int'},
                    {type='bool'},
                },
                ...
            )
            return _G['simAseba']['_thymio2_set_button'](id,index,value)
        end
    end)
sim.registerScriptFunction('simThymio.set_button@Aseba', 'simThymio.set_button(int id,int index,bool value)\n\nOverwrite the current state of a button sensor')


return simThymio
